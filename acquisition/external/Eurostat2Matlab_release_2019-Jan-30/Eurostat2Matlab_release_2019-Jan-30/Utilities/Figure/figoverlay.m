function f1 = figoverlay(varargin)
%
% Put 2 plots over each other in 2 layers
% This function can be used recursively to overlay 3 or more plots into a single one.
% - By default, the output figure gets adjusted by dynammo.plot.A4() inside figcombine() to make PDF printing easier
% - It is important to use 'A4' property for the final overlaid figure, otherwise pdfgen() will reprocess the figure one more time
% 
% Should fig2, fig3, ... fields exist in either of the input figures, only the first will be processed, the rest will be ignored
%
% INPUT: fig1 ...object structure resulting from plot()
%        fig2 ...object structure resulting from plot()
%
% OUTPUT: f1 ...fig1 laid over fig2
%

%
% >> Project Dyn:Ammo - EUROSTAT module, release 2019-Jan-30
% >> Written by: Jakub Rysanek
%

% keyboard;

p = inputParser;

addRequired(p,'fig1'); 
addRequired(p,'fig2');

if dynammo.compatibility.isAddParameter
    addParameter(p,'yright',0,@(x) any(x==[0;1]));% See explanation below in Vert. limit section
    addParameter(p,'toplayer',1,@(x) any(x==[1;2]));
    addParameter(p,'mapping','linmap',@(x) any(validatestring(x,{'linmap','minmax','exact'})));
    addParameter(p,'legend_merge',1,@(x) any(x==[0;1]));
    addParameter(p,'xlabels','Y',@(x) any(validatestring(x,{'Y','Q','M','D'})));
    addParameter(p,'maxticks',0,@(x) isscalar(x) && isa(x,'double'));
    addParameter(p,'clone',0,@(x) any(x==[0;1]));
    addParameter(p,'scaling',1,@(x) length(x)<=2);
   %addParameter(p,'reuse',0,@(x) x==0);% Use 'clone' instead, re-using does not make sense
    
    % figcombine() options
    addParameter(p,'A4','dont',@(x) any(strcmpi(x,dynammo.plot.A4types())));
    addParameter(p,'suptitle','',@ischar);% 'suptitle' gets usually inherited from fig1
    
else
    addParamValue(p,'yright',0,@(x) any(x==[0;1]));% See explanation below in Vert. limit section
    addParamValue(p,'toplayer',1,@(x) any(x==[1;2]));
    addParamValue(p,'mapping','linmap',@(x) any(validatestring(x,{'linmap','minmax','exact'})));
    addParamValue(p,'legend_merge',1,@(x) any(x==[0;1]));
    addParamValue(p,'xlabels','Y',@(x) any(validatestring(x,{'Y','Q','M','D'})));
    addParamValue(p,'maxticks',0,@(x) isscalar(x) && isa(x,'double'));
    addParamValue(p,'clone',0,@(x) any(x==[0;1]));
    addParamValue(p,'scaling',1,@(x) length(x)<=2);
   %addParamValue(p,'reuse',0,@(x) x==0);% Use 'clone' instead, re-using does not make sense
    
    % figcombine() options
    addParamValue(p,'A4','dont',@(x) any(strcmpi(x,dynammo.plot.A4types())));
    addParamValue(p,'suptitle','',@ischar);% 'suptitle' gets usually inherited from fig1
    
end

p.parse(varargin{:});
args = p.Results;

% Not to be changed
args.reuse = 0;

% Swap inputs if fig2 is the main fig
if args.toplayer==1
    f1 = args.fig1;
    f2 = args.fig2;
else 
    f2 = args.fig1;
    f1 = args.fig2;
end

%% Temporary deletion of GUI tools
% -> tsobj/plot() results should be a struct object
% -> Matlab plots are either in double format (2014b-), or in matlab.ui.Figure object class (2014b+)

% keyboard;figdebug()

if isstruct(f1) 
    if isfield(f1,'sub')
        f1_naked_han = f1.fig;
    elseif isfield(f1,'fig1')
        f1_naked_han = f1.fig1.handle;
    else
        disp('Unresolved situation...');
        keyboard;
    end
    if isfield(f2,'sub')
        f2_naked_han = f2.fig;
    elseif isfield(f2,'fig1')
        f2_naked_han = f2.fig1.handle;
    else
        disp('Unresolved situation...');
        keyboard;
    end    
else
    f1_naked_han = f1;% 2014b+ compatible
    f2_naked_han = f2;% 2014b+ compatible
end

isMenu_f1 = get(f1_naked_han,'MenuBar');% 2014b+ compatible
isMenu_f2 = get(f2_naked_han,'MenuBar');% 2014b+ compatible
set(f1_naked_han,'MenuBar','none','ToolBar','none');
set(f2_naked_han,'MenuBar','none','ToolBar','none');

% isMenu = get(f1,'MenuBar');
% set(fhan,'MenuBar','none','ToolBar','none');

%% Deal with regular Matlab figures on input
% -> here we process 2014b+ figures as well (class is matlab.ui.Figure, not struct, not double)

if ~isstruct(f1)
    f1 = dynammo.plot.gcf2obj(f1);
end
if ~isstruct(f2)
    f2 = dynammo.plot.gcf2obj(f2);
end

% keyboard;figdebug()

%% Translate non-standard input
% - this is needed for all plots generated by simple plot command (1 subplot only via plot1tsobj)
% - Required structure for the rest of this function:
%   gobj.fig1.handle: 2
%        fig1.sub1.handle: 405.0297
%                 .data: {[407.0297]}
%                 .legend: 408.0319
%                 .emphasized: {[406.0297]}
%                 .diffs: 402.0742
%                 .title: 403.0742
%       fig1.suptitle: 23.08
% 
% This structure should be passed in as argument, if not
% "gobj_transform" can try to reconstruct it from the the given input

f1 = correct_obj_structure(f1);
f2 = correct_obj_structure(f2);

% Plus f2 cannot contain more than 1 subplot (diffs in a separate subplot are allowed)
if isfield(f2,'sub2')
    error_msg('Figure overlay','2nd input cannot contain more than 1 subplot...');
end

% Undock all figures (docked mode disallowed due to freedom in positioning)
set(f1.handle,'WindowStyle','normal');% 'normal'|'docked'
set(f2.handle,'WindowStyle','normal');% 'normal'|'docked'

%% Create identical copies of the original figures
% keyboard;figdebug()
if args.clone==1
    
    if isempty(args.suptitle)
        f1 = figclone(f1);
        f2 = figclone(f2);
    else
        warning_msg('figoverlay()','Cloning with a new suptitle is not recommended, suptitle is by default inherited from fig1...');
        f2 = figclone(f2);
        f1 = figclone(f1);% Suptitle works on f1, we need to touch it as last! Activation command would make it visible...
                          % However, switching the order may result in fighandles that do not form a consecutive series
                          % and postprocessing of the result may be hard to accomplish (last time sub5.legend suddenly became sub4.legend after figcombine() step)
    end

end

%% Super title
% keyboard;figdebug()
% Input options consistency
if strcmpi(args.A4,'dont') && ~isempty(args.suptitle)
    if isfield(f1,'suptitle')
        set(f1.suptitle,'string',args.suptitle);
    else
        % Create a new super title
        f1.suptitle=dynammo.plot.suptitle(f1.handle,args.suptitle);
    end
else
    % in 'landscape'/'portrait' mode the suptitle will be handled inside figcombine()
end

% Redundant 2nd fig. super title
% - this portion of code must be after the clones get created...
if isfield(f2,'suptitle')
    %warning_msg('Figure overlay','''suptitle'' from 2nd input will be ignored ...');
    delete(f2.suptitle)
    f2 = rmfield(f2,'suptitle');
end

%% Apply transparent background for all f1 contents

nsubs = length(sublist(fieldnames(f1),'sub','<'));
for isub = 1:nsubs
    %set(f1.(sprintf('sub%.0f',isub)).handle,'color','none');
    ax = findobj(f1.handle,'Type','Axes');% -> we need all axes objects, e.g. diffs columns are not in subx format
    set(ax,'Color','none');
end

% Current f1 contents
ch = get(f1.handle,'children');
nch = length(ch);% -> including legend, but does not matter

%% Moving f2->f1

% Current f2 contents
ch2 = get(f2.handle,'children');% Including diffs
ch2_incl_legend = ch2;

% keyboard;figdebug()

% Moving step
leg_to_delete = 0;
for ik = length(ch2):-1:1
    if ~strcmpi(get(ch2(ik),'Tag'),'legend') && ...
       ~strncmpi(get(ch2(ik),'Type'),'ui',2)
            
         % >>> M2014b+ fix for legend [part 1/3]
         if ~isempty(getappdata(ch2(ik),'LegendPeerHandle')) || ...
            ~isempty(getappdata(ch2(ik),'LayoutPeers')) % M2016b+ change :( [1/2]
             leg_to_delete = ik;
         end
         % <<<
         
         set(ch2(ik),'parent',f1.handle); %set(f2.sub1.handle,'parent',f1.handle);    
         
    else
        % Delete legend from the list of children
        ch2(ik) = [];
        
    end
end

% >>> M2014b+ fix for legend [part 3/3]
% We must save the legend entries before we destroy the object
if isfield(f2.sub1,'legend') && args.legend_merge==1
    lg2 = get(f2.sub1.legend,'UserData');
    if args.clone==1
%         if iscell(lg2.handles)
%             lg2handles = cellfun(@double,lg2.handles{1}(:));% We only retain half1 for legend, legend clicks requiring both half planes are no longer supported
%         else
            lg2handles = lg2.handles(:);% Already converted to handles in gobj_generate()
%         end
    else
        if iscell(lg2.handles)
            lg2handles = double(lg2.handles{1}(:));% We only retain half1 for legend, legend clicks requiring both half planes are no longer supported
        else
            lg2handles = lg2.handles(:);
        end        
    end
    lg2strings = lg2.lstrings(:);
    
end
if leg_to_delete>0
    
    % It may have been deleted by the user, getappdata() does not use fresh listeners
    try %if  isappdata(ch2_incl_legend(leg_to_delete),'LegendPeerHandle')
        delete(getappdata(ch2_incl_legend(leg_to_delete),'LegendPeerHandle'));
    end
    try % M2016b+ change :( [2/2]
        delete(getappdata(ch2_incl_legend(leg_to_delete),'LayoutPeers'));
    end  
    
end
% <<<

nch2= length(ch2);

%% Horizontal limits

% keyboard;figdebug()

try
    xlims1 = get(f1.sub1.handle,'Xlim');% All other layers were treated previously, here only the top layer relevant
    xlims2 = get(f2.sub1.handle,'Xlim');% Top layer will serve as benchmark (diffs have the same xlims)
catch
    error_msg('Figure overlay',['It looks like there is a non-standard plot on input, ' ...
                                '"sub/sub1" fields in the input structures are mandatory...']);
end

xlims = [min(xlims1(1),xlims2(1)) max(xlims1(2),xlims2(2))];

% For each axes object apply the same xlims
for isub = 1:nsubs
    %set(f1.(['sub' sprintf('%.0f',isub)]).handle,'xlim',xlims);
     set(f1.(sprintf('sub%.0f',isub)).handle,'Xlim',xlims);
end


% 2nd figure, possibly including 'diffs' object
if strcmpi(args.mapping,'exact')
    yticks_inherited = get(ch2(1),'ytick');
end

for ich = 1:nch2
    set(ch2(ich),'xlim',xlims, ...
                'xtick',[], ...
                'ytick',[], ... first we delete all yticks, later we apply the yscale just to 1 graph
                'Box','off', ...
                'ygrid','off');%f2.sub1.handle
end
% keyboard;
% X labels
kids = get(f1.sub1.handle,'children');
tind = [];
if ~isempty(kids)
    ntind = Inf;
    for ii = 1:length(kids)
       %try % some kids do not have 'xdata'
        if isfield(get(kids(ii)),'XData')    
            if strcmpi(get(kids(ii),'Type'),'line') % Bars usually have sum line, other types not relevant hopefully
                xdata_now = get(kids(ii),'XData');
                if ntind>length(xdata_now)
                    tind = xdata_now;
                    ntind = length(tind);
                end
            end
        end
       %end
    end
else
    % 1 line graphs have XData directly in gca
    tind = get(f1.sub1.handle,'XData');
end

if isempty(tind)
   error_msg('figoverlay()','Horizontal Xticks could not be identified from the input graph handles...');
end
diffs = tind(2:end)-tind(1:end-1);
mindiff = min(diffs(:));

% Determine frequency
if mindiff<0.003
    freq = 'D';
elseif mindiff<0.09
    freq = 'M';
elseif mindiff<0.26 % 0.25 exactly in this case
    freq = 'Q';
else
    freq = 'Y';   
end

% keyboard;figdebug()

[xticks,xlabels] = figlabels(freq,xlims,args.maxticks);
set(f1.sub1.handle,'xtick',xticks,'xticklabel',xlabels);% To be applied to the top layer only

%% Vertical limits
% - args.yright: 0 -> right axis on input stays right, left stays left
%                1 -> all axes objects go to the right

% Lists of subplots with axes located right/left 
left  = cell(nsubs+nch2,1);
right = cell(nsubs+nch2,1);
ylims_left  = [Inf -Inf];% +- ordering on purpose!
ylims_right = [Inf -Inf];% +- ordering on purpose!
for isub = 1:nsubs
    %ylims_now = get(f1.(['sub' sprintf('%.0f',isub)]).handle,'ylim');
     ylims_now = get(f1.(sprintf('sub%.0f',isub)).handle,'ylim');
    %if strcmpi('right',get(f1.(['sub' sprintf('%.0f',isub)]).handle,'yaxislocation'))
     if strcmpi('right',get(f1.(sprintf('sub%.0f',isub)).handle,'yaxislocation'))
        if isub~=1
            %right{isub,1} = f1.(['sub' sprintf('%.0f',isub)]).handle;
             right{isub,1} = f1.(sprintf('sub%.0f',isub)).handle;
            ylims_right(1) = min(ylims_right(1),ylims_now(1));
            ylims_right(2) = max(ylims_right(2),ylims_now(2));
        else
            error_msg('Figure overlay','The first graph must have the vertical axis on the left...');
        end
    else
            %left{isub,1}  = f1.(['sub' sprintf('%.0f',isub)]).handle;
             left{isub,1}  = f1.(sprintf('sub%.0f',isub)).handle;
            ylims_left(1) = min(ylims_left(1),ylims_now(1));
            ylims_left(2) = max(ylims_left(2),ylims_now(2));            
    end
end

% 2nd figure, possibly including 'diffs' object
for ich = 1:nch2
    ylims_now = get(ch2(ich),'ylim');
    if args.yright
                right{ich+nsubs,1} = ch2(ich);
                ylims_right(1) = min(ylims_right(1),ylims_now(1));
                ylims_right(2) = max(ylims_right(2),ylims_now(2));
    else
        if strcmpi('right',get(ch2(ich),'yaxislocation'))
                right{ich+nsubs,1} = ch2(ich);
                ylims_right(1) = min(ylims_right(1),ylims_now(1));
                ylims_right(2) = max(ylims_right(2),ylims_now(2));
        else
                left{ich+nsubs,1}  = ch2(ich);
                ylims_left(1) = min(ylims_left(1),ylims_now(1));
                ylims_left(2) = max(ylims_left(2),ylims_now(2));             
        end
    end
end

% Drop empty entries
right = right(~cellfun('isempty',right));
left  = left( ~cellfun('isempty',left));

% Adjust limits on all left axes
for ii = 1:length(left)
    set(left{ii},'ylim',ylims_left);
end
% set(left{1},'ytick',ylims_left);% AUTO!!!

if ~isempty(right)
    
    if ~strcmpi(args.mapping,'exact')
        yticks_left = get(left{1},'ytick');
        [ymin_right,ymax_right,ticks_right] = dynammo.plot.right_axis_tick_mapping(ylims_left,yticks_left,ylims_right);
        
        if strcmpi(args.mapping,'minmax')
            ticks_right = [ticks_right(1) ticks_right(end)];
        end
        
        for ich = 1:length(right)
            set(right{ich}, ...
                'ylim',[ymin_right ymax_right], ...
                'yaxislocation','right');% f2.sub1.handle
        end
        set(right{1},'ytick',ticks_right);
    
    else
        for ich = 1:length(right)
            set(right{ich}, ...
                'yaxislocation','right');% f2.sub1.handle
        end
        set(right{1},'ytick',yticks_inherited);
        
    end
    
end

%% Object ordering
% keyboard;figdebug()
set(f1.handle,'children',cat(1,ch(:),ch2(:))); %f2.sub1.handle

%% Plug back the GUI tools (if these were initially present)
% keyboard;figdebug()
if strcmpi(isMenu_f1,'figure')
    set(f1_naked_han,'MenuBar','figure','ToolBar','figure');
    pushbuttons(f1_naked_han);% Needed in visualization_tutorial()
    
    % Clone too
    if args.clone==1
        set(f1.handle,'MenuBar','figure','ToolBar','figure');
        pushbuttons(f1.handle);
    end
    
end
if strcmpi(isMenu_f2,'figure')
    %<Empty figure>
    %set(f2_naked_han,'MenuBar','figure','ToolBar','figure');
    %pushbuttons(f2_naked_han);
    
    % Clone too
    if args.clone==1
        set(f2.handle,'MenuBar','figure','ToolBar','figure');
        pushbuttons(f2.handle);
    end
    
end

%% Legend

% keyboard;%figdebug()

if isfield(f1.sub1,'legend')
    lg1 = get(f1.sub1.legend,'UserData');
    if args.clone==1
%         if iscell(lg1.handles)
%             lghandles = cellfun(@double,lg1.handles{1}(:));% Only half1 for bars
%         else
            lghandles = lg1.handles(:);% Already converted to handles in gobj_generate()
%         end
    else
        if iscell(lg1.handles)
            lghandles = double(lg1.handles{1}(:));% Only half1 for bars
        else
            lghandles = lg1.handles(:);
        end        
    end
    lgstrings = lg1.lstrings(:);
    
    % Data envelope
    if isfield(lg1,'convHull') % M2014b+
        convHull = lg1.convHull; 
       
    else % M2014b-
        convHull = dynammo.plot.convexHull_legacy2014b(f1.sub1.handle);
        
    end
    
    % Delete previous legend
    delete(f1.sub1.legend);
    
else
    lgstrings = [];
    lghandles = [];
    convHull  = [];
    
end
if isfield(f2.sub1,'legend') && args.legend_merge==1
    
    % >>> M2014b+ fix for legend [part 2/3]
    %lg2 = get(f2.sub1.legend,'UserData');
    lghandles = cat(1,lghandles,lg2handles);%lg2.handles(:));
    lgstrings = cat(1,lgstrings,lg2strings);%lg2.lstrings(:));
    % <<<
    
    % Data envelope
    if isfield(lg2,'convHull') % M2014b+
        convHull = [convHull;lg2.convHull]; 
       
    else % M2014b-
        convHull = [convHull; ...
                    dynammo.plot.convexHull_legacy2014b(f2.sub1.handle)];
        
    end
    
end

set(0,'currentfigure', f1.handle);
% lghandles = cat(1,lg1.handles(:),lg2.handles(:));
% lgstrings = cat(1,lg1.lstrings(:),lg2.lstrings(:));
if ~isempty(lghandles)
    
    if ~dynammo.compatibility.M2016a

        [lg,entries] = legend(lghandles,lgstrings);
        set(lg,'color',[1 1 1]);

        % <convHull already created>
    
        % Mouse clicks    
%         if strcmpi(get(f1.handle,'visible'),'on')
% 
%             tmp = get(lg,'Userdata');
%             for ient = 1:size(tmp.handles,1)
%                 item = get(tmp.handles(ient));
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 if isfield(item,'Color') % Probably line ('Color' may be shared across more objects)
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     colors = get(tmp.handles(ient),'Color');
%                     set(entries(ient), 'HitTest', 'on', 'ButtonDownFcn',...
%                         @(varargin) legendClick(ient,entries,colors,f1.sub1.data), ...
%                         'UserData', true);
% 
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%                 elseif isfield(item,'FaceColor') % bars have 'FaceColor' property
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%                     set(entries(ient), 'HitTest', 'on', 'ButtonDownFcn',...
%                         @(varargin) legendClick(ient,entries,[],f1.sub1.data{1},f1.sub1.data{2}), ...
%                         'UserData', true);
% 
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 else % Unexpected situation
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     error_msg('Figoverlay','Untreated situation occurred...');
% 
%                 end
%             end
% 
%         end
        
    %%%%%%%%%%%%%%%%%%%%%
    else % M2016a+
    %%%%%%%%%%%%%%%%%%%%%

%         if iscell(lghandles) % -> bar graph
%             lg = legend(lghandles{1},lgstrings);% only 1st half of handles assumed
%             lg.UserData.handles = {f1.sub1.data{1};f1.sub1.data{2}};
%         else % -> line graph
            lg = legend(lghandles,lgstrings);
            lg.UserData.handles = double(lg.PlotChildren(:));
%         end
        set(lg,'color',[1 1 1]);
 
        lg.UserData.lstrings = lg.String(:);
        %lg.UserData.LabelHandles = entries;
        lg.UserData.PlotHandle = f1.sub1.handle;% Note that this field is not linked as a listener when the value changes
                                                % -> gobj_generate() uses it, but it should work
        %lghandle.UserData.LegendPosition -> better to take it directly from legend handle (it is connected to listeners, when units/pos change)

        % Data envelope (convex hull)
        lg.UserData.convHull = convHull;

        % Mouse clicks    
%         if strcmpi(get(f1.handle,'visible'),'on')
%             set(lg,'ItemHitFcn',@lgndItemClick);
%         end
        
    end
    
    % Otherwise legend positioning via figcombine()
    %drawnow;
    if ~strcmpi(args.A4,'dont')    
        legend_best2(f1.sub1.handle,lg,'ban_injection');
    end
    
else
    lg = '';
end

% Delete previously generated legend
% delete(f1.legend);

%% Align positioning of figures

axesPosition = get(f1.sub1.handle,'Position');

% Round #1 - to locate the legend properly
for isub = 1:nsubs
    %set(f1.(['sub' sprintf('%.0f',isub)]).handle, 'Position',axesPosition);
     set(f1.(sprintf('sub%.0f',isub)).handle, 'Position',axesPosition);
    %if isfield(f1.(['sub' sprintf('%.0f',isub)]),'diffs')
     if isfield(f1.(sprintf('sub%.0f',isub)),'diffs')
        %set(f1.(['sub' sprintf('%.0f',isub)]).diffs.axis, 'Position',axesPosition);
         set(f1.(sprintf('sub%.0f',isub)).diffs.axis, 'Position',axesPosition);
     end
end
for ich = 1:length(ch2)
    set(ch2(ich),'Position',axesPosition);% diffs are included in ch2
    
end
% set(lg,'Position',get(lg,'Position') + [0.05 0 0 0]);

% Round #2 - to fix the position of graphs
% set(ghandle, 'Position',axesPosition);
% set(f2.sub,'Position',axesPosition);

%% Destroy original graph (it can also be a clone)
close(f2.handle);
    
%% Update object structure
% - <gobj> taken for tsobj() input
% - non-tsobj() input => should always be converted into tsobj in terms of the X axis
% 
% outstr.fig1.handle
% outstr.fig1.sub1.handle
% outstr.fig1.sub1.data
% [outstr.fig1.sub1.legend]
% [outstr.fig1.sub1.diffs]      ...diffs stores both axis/data handles, but is nested in sub1 structure
% [outstr.fig1.sub1.emphasized]
% [outstr.fig1.sub1.title]
% [outstr.fig1.sub1.highlighted]
% [outstr.fig1.suptitle]


f1.(sprintf('sub%.0f',nsubs+1)).handle = f2.sub1.handle;
if isfield(f2.sub1,'data') % -> Regular Matlab figures do not have this field specified
    f1.(sprintf('sub%.0f',nsubs+1)).data   = f2.sub1.data;
end
if ~isempty(lg)
    f1.sub1.legend = lg;% Only in the top-most subplot
end

% Object shuffling
rest_ = fieldnames(f2.sub1)-{'handle';'data';'legend'};% 'suptitle' automatically inherited from fig1, if exists
if ~isempty(rest_)
    for ii = 1:length(rest_)
            f1.(sprintf('sub%.0f',nsubs+1)).(rest_{ii}) = f2.sub1.(rest_{ii});
            
            % [xxx] Update ylimits for patch (highlight) objects (lower layer figure)
            if strcmpi(rest_{ii},'highlighted')
               highs = f1.(sprintf('sub%.0f',nsubs+1)).highlighted;
               for ih = 1:length(highs)
                   correct_ylims = get(get(highs{ih},'parent'),'ylim');
                   set(highs{ih},'ydata',[correct_ylims(1)*ones(1,2) correct_ylims(2)*ones(1,2)]);
               end
               
            end
    end
end

% [xxx] Update ylimits for patch (highlight) objects (top layer figure)
% -> only the top sub1 necessary to check here, the rest checked while appending new figures
if isfield(f1.sub1,'highlighted')
       highs = f1.sub1.highlighted;
       for ih = 1:length(highs)
           correct_ylims = get(get(highs{ih},'parent'),'ylim');
           set(highs{ih},'ydata',[correct_ylims(1)*ones(1,2) correct_ylims(2)*ones(1,2)]);
       end    
end

%% Final output
ftmp.fig1 = f1;
f1 = ftmp;

% Paper positioning via figcombine()
if ~strcmpi(args.A4,'dont')
    % Cloning of already cloned figures does not make sense   
    f1 = figcombine({f1},'clone',0,'suptitle',args.suptitle,'A4',args.A4,'ban_injection',1);
else
    % At least set the correct tag
    set(f1.fig1.handle,'Tag','figready_dont');
end

%% Rescale fig2 subplot area
% -> legend moves fig1, but leaves fig2 where it was prior to legend location fiddling
% keyboard;figdebug()
pos1 = get(f1.fig1.sub1.handle,'position');
pos2 = get(f1.fig1.sub2.handle,'position');
pos2(3) = pos1(3);
set(f1.fig1.sub2.handle,'position',pos2);

%% Make axes invisible

set(f1.fig1.sub2.handle,'xcolor',[1 1 1]);%,'ycolor',[1 1 1]);
 
%% Nested functions

    function obj_ok = correct_obj_structure(obj_in)
        if isfield(obj_in,'sub')
            % f1 is a simple plot (1 subplot only)
            obj_ok = dynammo.plot.gobj_transform(obj_in);%correct_obj_structure(f1);
            obj_ok = obj_ok.fig1;
            
        elseif isfield(obj_in,'fig1')
            obj_ok = obj_in.fig1;
            
        elseif isfield(obj_in,'handle')
            obj_ok = obj_in; % already in correct format
            
        else
            error_msg('Figure overlay','Weird input, must be a structure generated by plot()...');
        end
        
    end %<correct_obj_structure>

end %<eof>